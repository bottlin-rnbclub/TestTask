{"ast":null,"code":"/* import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { searchRepos, getRepoDetails } from '../../api/github';\r\nimport { RepoState, Repo } from '../../types';\r\n\r\nconst initialState: RepoState = {\r\n  repos: [],\r\n  status: 'idle',\r\n  selectedRepo: null,\r\n};\r\n\r\nexport const fetchRepos = createAsyncThunk<Repo[], string>(\r\n  'repos/fetchRepos',\r\n  async (query, { rejectWithValue }) => {\r\n    try {\r\n      const data = await searchRepos(query);\r\n      return data.items;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchRepoDetails = createAsyncThunk<Repo, { owner: string; repo: string }>(\r\n  'repos/fetchRepoDetails',\r\n  async ({ owner, repo }, { rejectWithValue }) => {\r\n    try {\r\n      const data = await getRepoDetails(owner, repo);\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst reposSlice = createSlice({\r\n  name: 'repos',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchRepos.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchRepos.fulfilled, (state, action: PayloadAction<Repo[]>) => {\r\n        state.status = 'idle';\r\n        state.repos = action.payload;\r\n      })\r\n      .addCase(fetchRepos.rejected, (state) => {\r\n        state.status = 'failed';\r\n      })\r\n      .addCase(fetchRepoDetails.fulfilled, (state, action: PayloadAction<Repo>) => {\r\n        state.selectedRepo = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default reposSlice.reducer;\r\n */\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst initialState = {\n  repos: [],\n  selectedRepo: null,\n  loading: false,\n  error: null,\n  sortField: 'name',\n  sortOrder: 'asc'\n};\nexport const fetchRepos = createAsyncThunk('repos/fetchRepos', async query => {\n  const response = await axios.get(`https://api.github.com/search/repositories?q=${query}&per_page=100`);\n  return response.data.items;\n});\nexport const fetchRepoDetails = createAsyncThunk('repos/fetchRepoDetails', async ({\n  owner,\n  repo\n}) => {\n  const response = await axios.get(`https://api.github.com/repos/${owner}/${repo}`);\n  return response.data;\n});\nconst reposSlice = createSlice({\n  name: 'repos',\n  initialState,\n  reducers: {\n    setSortField: (state, action) => {\n      state.sortField = action.payload;\n    },\n    setSortOrder: (state, action) => {\n      state.sortOrder = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchRepos.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchRepos.fulfilled, (state, action) => {\n      state.loading = false;\n      state.repos = action.payload;\n    }).addCase(fetchRepos.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch repositories';\n    }).addCase(fetchRepoDetails.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchRepoDetails.fulfilled, (state, action) => {\n      state.loading = false;\n      state.selectedRepo = action.payload;\n    }).addCase(fetchRepoDetails.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch repository details';\n    });\n  }\n});\nexport const {\n  setSortField,\n  setSortOrder\n} = reposSlice.actions;\nexport default reposSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","repos","selectedRepo","loading","error","sortField","sortOrder","fetchRepos","query","response","get","data","items","fetchRepoDetails","owner","repo","reposSlice","name","reducers","setSortField","state","action","payload","setSortOrder","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["C:/Users/russi/OneDrive/Рабочий стол/tex/tex-zadanie/src/features/repos/reposSlice.ts"],"sourcesContent":["/* import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { searchRepos, getRepoDetails } from '../../api/github';\r\nimport { RepoState, Repo } from '../../types';\r\n\r\nconst initialState: RepoState = {\r\n  repos: [],\r\n  status: 'idle',\r\n  selectedRepo: null,\r\n};\r\n\r\nexport const fetchRepos = createAsyncThunk<Repo[], string>(\r\n  'repos/fetchRepos',\r\n  async (query, { rejectWithValue }) => {\r\n    try {\r\n      const data = await searchRepos(query);\r\n      return data.items;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchRepoDetails = createAsyncThunk<Repo, { owner: string; repo: string }>(\r\n  'repos/fetchRepoDetails',\r\n  async ({ owner, repo }, { rejectWithValue }) => {\r\n    try {\r\n      const data = await getRepoDetails(owner, repo);\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst reposSlice = createSlice({\r\n  name: 'repos',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchRepos.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchRepos.fulfilled, (state, action: PayloadAction<Repo[]>) => {\r\n        state.status = 'idle';\r\n        state.repos = action.payload;\r\n      })\r\n      .addCase(fetchRepos.rejected, (state) => {\r\n        state.status = 'failed';\r\n      })\r\n      .addCase(fetchRepoDetails.fulfilled, (state, action: PayloadAction<Repo>) => {\r\n        state.selectedRepo = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default reposSlice.reducer;\r\n */\r\n\r\n\r\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Repo } from '../../types';\r\nimport axios from 'axios';\r\n\r\ninterface ReposState {\r\n  repos: Repo[];\r\n  selectedRepo: Repo | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  sortField: string;\r\n  sortOrder: 'asc' | 'desc';\r\n}\r\n\r\nconst initialState: ReposState = {\r\n  repos: [],\r\n  selectedRepo: null,\r\n  loading: false,\r\n  error: null,\r\n  sortField: 'name',\r\n  sortOrder: 'asc',\r\n};\r\n\r\nexport const fetchRepos = createAsyncThunk<Repo[], string>(\r\n  'repos/fetchRepos',\r\n  async (query: string) => {\r\n    const response = await axios.get(`https://api.github.com/search/repositories?q=${query}&per_page=100`);\r\n    return response.data.items;\r\n  }\r\n);\r\n\r\nexport const fetchRepoDetails = createAsyncThunk<Repo, { owner: string; repo: string }>(\r\n  'repos/fetchRepoDetails',\r\n  async ({ owner, repo }) => {\r\n    const response = await axios.get(`https://api.github.com/repos/${owner}/${repo}`);\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst reposSlice = createSlice({\r\n  name: 'repos',\r\n  initialState,\r\n  reducers: {\r\n    setSortField: (state, action: PayloadAction<string>) => {\r\n      state.sortField = action.payload;\r\n    },\r\n    setSortOrder: (state, action: PayloadAction<'asc' | 'desc'>) => {\r\n      state.sortOrder = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchRepos.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchRepos.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.repos = action.payload;\r\n      })\r\n      .addCase(fetchRepos.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || 'Failed to fetch repositories';\r\n      })\r\n      .addCase(fetchRepoDetails.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchRepoDetails.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.selectedRepo = action.payload;\r\n      })\r\n      .addCase(fetchRepoDetails.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message || 'Failed to fetch repository details';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { setSortField, setSortOrder } = reposSlice.actions;\r\n\r\nexport default reposSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}